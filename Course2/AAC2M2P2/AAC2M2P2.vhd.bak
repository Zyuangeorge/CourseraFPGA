library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity ram128_32 is
    port (
        address : in std_logic_vector(6 downto 0);         -- 7-bit address input
        clock   : in std_logic := '1';                    -- clock input
        data    : in std_logic_vector(31 downto 0);       -- 32-bit data input
        wren    : in std_logic;                           -- write enable input
        q       : out std_logic_vector(31 downto 0)       -- 32-bit data output
    );
end ram128_32;

architecture rtl of ram128_32 is
    -- Define RAM as an array of 128 32-bit words
    type ram is array (0 to 127) of std_logic_vector(31 downto 0);
    signal mem : ram := (others => (others => '0')); -- Initialize RAM to zeros
begin
    process(clock)
    begin
        if rising_edge(clock) then
            -- Write operation: Update memory if write enable is active
            if wren = '1' then
                mem(to_integer(unsigned(address))) <= data;
            end if;
        end if;
    end process;

    -- Read operation: Output the value at the specified address
    q <= mem(to_integer(unsigned(address)));
end rtl;
